<!DOCTYPE html>
<html>
	<head>
		<title>P.E.A.C.E. by Piece - Hybrid Retail Auction</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			html, body {
				height: 100%;
			}
			body {
				background-color: #000000;
				margin: 0;
				font-family: Helvetica, sans-serif;;
				overflow: hidden;
			}
			a {
				color: #ffffff;
			}
			#info {
				position: absolute;
				width: 100%;
				color: #ffffff;
				padding: 5px;
				font-family: Monospace;
				font-size: 24px;
				font-weight: bold;
				text-align: center;
				border: 1px solid white;
				z-index: 1;
			}
			#menu {
				position: absolute;
				bottom: 20px;
				width: 100%;
				text-align: center;
			}
			.element {
				width: 225px;
				height: 300px;
				margin: 10px;
				box-shadow: 0px 0px 12px rgba(255,100,255,0.5);
				border: 1px solid rgba(255,100,255,0.25);
				text-align: center;
				cursor: default;
			}
			.element:hover {
				box-shadow: 0px 0px 12px rgba(0,255,255,0.75);
				border: 1px solid rgba(127,255,255,0.75);
			}
				.element .number {
					position: absolute;
					top: 20px;
					right: 20px;
					font-size: 12px;
					color: rgba(127,255,255,0.75);
				}
				.element .symbol {
					position: absolute;
					top: 40px;
					left: 0px;
					right: 0px;
					font-size: 60px;
					font-weight: bold;
					color: rgba(255,255,255,0.75);
					text-shadow: 0 0 10px rgba(0,255,255,0.95);
				}
				.element .details {
					margin: 2.5%;
					left: 0px;
					right: 0px;
					font-size: 12px;
					color: rgba(255,127,255,0.75);
				}

				.artInfoPanel:hover{
					box-shadow: 0px 0px 12px rgba(0,255,255,0.75);
					background-color: rgba(0,255,255,0.95);
				}

				.silverFrame {
					border: 7px solid rgba(127,127,127,0.85);
				}
			button {
				color: rgba(127,255,255,0.75);
				background: transparent;
				outline: 1px solid rgba(127,255,255,0.75);
				border: 0px;

				cursor: pointer;
			}
			button:hover {
				background-color: rgba(0,255,255,0.5);
			}
			button:active {
				color: #000000;
				background-color: rgba(0,255,255,0.75);
			}
		</style>
	</head>
	<body>
		<script src="<%= static_path(@conn, "/js/app.js") %>"></script>
    <script src="<%= static_path(@conn, "/js/three.min.js") %>"></script>
    <script src="<%= static_path(@conn, "/js/tween.min.js") %>"></script>
    <script src="<%= static_path(@conn, "/js/TrackballControls.js") %>"></script>
    <script src="<%= static_path(@conn, "/js/CSS3DRenderer.js") %>"></script>

		<div id="info">P.E.A.C.E. by Piece - Hybrid Retail Auction <a href="http://pxp.thepeacemuseum.org" target="_blank" rel="noopener">info</a>.</div>
		<div id="container"></div>
		<div id="menu">
			<button id="table">TABLE</button>
			<button id="sphere">SPHERE</button>
			<button id="helix">HELIX</button>
			<button id="grid">GRID</button>
		</div>

		<script>
			var camera, scene, renderer, mouse, raycaster;
			var cameraStart;
			var mouse = new THREE.Vector2(), INTERSECTED;
			var raycaster = new THREE.Raycaster();
			var controls;
			var objects = [];
			var targets = { table: [], sphere: [], helix: [], grid: [] };
			var backdrop;
			var backdropId = "backdrop_board0";

			var innerScreenWidth, innerScreenHeight;

			var container = document.getElementById('container');

			window.addEventListener( 'mousedown', onDocumentMouseDown, false );
			window.addEventListener( 'initBoard', initBoard, false);
			window.addEventListener( 'cameraZoom', cameraZoom, false);

			//init();

			animate();

			function onDocumentMouseDown( event ) {
    		event.preventDefault();
    		mouse.x = 2 * ( event.clientX / window.innerWidth ) - 1;
    		mouse.y = 1 - 2 * ( event.clientY / window.innerHeight );
				raycaster.setFromCamera(mouse, camera);
				var intersects = raycaster.intersectObjects( scene.children );
				console.log(mouse);
				console.log(intersects);
			}

			function initBoard( event ) {
				event.preventDefault();

				camera = initCamera();
				scene = new THREE.Scene();
				var tiles = event.board.tiles;

				//create the invisible 10x10 targets
				for (var i = 0; i < 10; i++){
					for (var j = 0; j < 10; j++){
						var element = document.createElement( 'div' );
						//element.style.background = "none";
						//element.classList.add("silverFrame");
						var w = 300;
						var h = (w/3)*4;
						element.style.width = w + "px";
						element.style.height = h + "px";

						var object = new THREE.CSS3DObject( element );

						object.position.x = (j-5)*(w*1.1);
						object.position.y = -(i-5)*(h*1.1);
						object.position.z = -7000;
						scene.add( object );
						targets.table.push( object );
					}
				}

				// create the actual tiles
				for ( var i = 0; i < tiles.length; i++ ) {

					//create the div element
					var element = document.createElement( 'div' );
					element.classList.add(tiles[i].hash);
					element.classList.add("element");
					element.style.backgroundColor = 'rgba(127,127,127,1)';
					var w = 300;
					var h = (w/3)*4; // give tiles a 3x4 ratio proportional to screen size
					element.style.width = w + "px";
					element.style.height = h + "px";

					//put the image inside of it
					var details = document.createElement( 'img' );
					details.className = 'details';
					details.style.width = "85%";
					details.style.height = "80%";
					details.src = "http://localhost:4000" + tiles[i].image_thumb;
					details.zIndex = 1;
					details.position = "static"
					element.appendChild( details );

					//add a bid button to the bottom
					var bidButton = document.createElement('div');
					bidButton.classList.add("artInfoPanel");
					bidButton.style.width = "100%";
					bidButton.style.height= "15%";
					bidButton.style.border= "1px solid rgba(0,255,255,0.95)";
					element.appendChild(bidButton);

					//create a 3d object somewhere in space for the div to go in
					var object = new THREE.CSS3DObject( element );
					object.position.x = tiles[i].x * 1000 - 3000;
					object.position.y = tiles[i].y * 1000 + 22000;
					object.position.z = tiles[i].z + 100000;

					//push the object onto the scene, and into the objects array.
					//Tiles will travel to spots in Targets array on load
					scene.add( object );
					objects.push( object );
					element.object = object;

					//Set up a click handler for each one that zoomes in closer.
					(function (_element) { //turn click events on elements into cameraZoom events
						_element.addEventListener( 'click', function ( event ) {
							var event = new Event("cameraZoom");
							event.destination = new THREE.Vector3( _element.object.position.x, _element.object.position.y, _element.object.position.z+2000);
							window.dispatchEvent(event);
							//transform( targets.grid, 2000 );
						}, false );
        	})(element);

					var object = new THREE.Object3D();
					var stepsX = window.innerWidth/10;
					var stepsY = window.innerHeight/10+20;
					object.position.x = (tiles[i].x * 5)*(300*1.1);
					object.position.y = (tiles[i].y * 5)*(400*1.1);
					console.log(stepsX);
					//scene.add( makeBackdrop(innerScreenWidth, innerScreenHeight, "red") );
					//object.position.x = tiles[i].x * stepsX //tiles[i].x * 300 - 1000; //-window.innerWidth;
					//object.position.x = (tiles[i].x-5) * stepsX;
					//object.position.y = (tiles[i].y+5) * stepsY; //-window.innerHeight;
					object.position.z = -7000; //-window.innerHeight;
					//targets.table.push( object );
				}

				//Add the blank frames
				for ( var i = tiles.length; i < 100; i++ ) {
					var element = document.createElement( 'div' );
					element.classList.add("silverFrame");
					//element.classList.add("element");
					element.style.backgroundColor = 'rgba(127,127,127,1)';

					var w = 300;
					var h = (w/3)*4; // give tiles a 3x4 ratio proportional to screen size
					element.style.width = w + "px";
					element.style.height = h + "px";

					var object = new THREE.CSS3DObject( element );
					//object.position.x = tiles[i].x * 1000 - 3000;
					//object.position.y = tiles[i].y * 1000 + 22000;
					//object.position.z = tiles[i].z + 100000;

					object.element = element;
					scene.add( object );
					objects.push( object );


				}

				// sphere
				var vector = new THREE.Vector3();
				for ( var i = 0, l = objects.length; i < l; i ++ ) {
					var phi = Math.acos( -1 + ( 2 * i ) / l );
					var theta = Math.sqrt( l * Math.PI ) * phi;
					var object = new THREE.Object3D();
					object.position.setFromSphericalCoords( 800, phi, theta );
					object.position.x = object.position.x + (window.innerWidth/2);

					vector.copy( object.position ).multiplyScalar( 2 );
					object.lookAt( vector );
					targets.sphere.push( object );
				}

				renderer = new THREE.CSS3DRenderer();
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.getElementById( 'container' ).appendChild( renderer.domElement );


				var button = document.getElementById( 'table' );
				button.addEventListener( 'click', function ( event ) {
					transform(targets.table, 500);
					var event = new Event("cameraZoom");

		      event.destination = new THREE.Vector3(cameraStart.x, cameraStart.y, cameraStart.z);
		      window.dispatchEvent(event);
					//
				}, false );
				var button = document.getElementById( 'sphere' );
				button.addEventListener( 'click', function ( event ) {
					transform( targets.sphere, 2000 );
				}, false );
				var button = document.getElementById( 'helix' );
				button.addEventListener( 'click', function ( event ) {
					transform( targets.helix, 2000 );
				}, false );
				var button = document.getElementById( 'grid' );
				button.addEventListener( 'click', function ( event ) {
					var event = new Event("cameraZoom");
		      event.destination = {x:1, y:1, z:1+500}
		      window.dispatchEvent(event);
					//transform( targets.grid, 2000 );
				}, false );
				transform( targets.table, 900 );
				//
				window.addEventListener( 'resize', onWindowResize, false );
			}


			function transform( targets, duration ) {
				TWEEN.removeAll();
				for ( var i = 0; i < objects.length; i ++ ) {
					var object = objects[ i ];
					var target = targets[ i ];
					new TWEEN.Tween( object.position )
						.to( { x: target.position.x, y: target.position.y, z: target.position.z }, Math.random() * duration + duration )
						.easing( TWEEN.Easing.Cubic.Out )
						.start();
					new TWEEN.Tween( object.rotation )
						.to( { x: target.rotation.x, y: target.rotation.y, z: target.rotation.z }, Math.random() * duration + duration )
						.easing( TWEEN.Easing.Exponential.InOut )
						.start();
				}
				new TWEEN.Tween( this )
					.to( {}, duration * 2 )
					.onUpdate( render )
					.start();
			}

			function initCamera(){
				var innerScreenAR = (16/9); //must be larger than 1
				//console.log("innerScreenAR: " + innerScreenAR);

				innerScreenWidth = window.innerWidth;
				//console.log("innerScreenWidth: " + innerScreenWidth);
				innerScreenHeight = innerScreenWidth / innerScreenAR;
				//console.log("innerScreenHeight: " + innerScreenHeight);

				camera = new THREE.PerspectiveCamera( 18, window.innerWidth/window.innerHeight, 1, 10000 );
				camera.position.z = 10000;
				//camera.position.x = camera.position.x + innerScreenWidth*2;
				//camera.position.x = camera.position.x + innerScreenWidth/2;
				//camera.position.y = camera.position.y + innerScreenHeight/2;

				cameraStart = new THREE.Vector3( camera.position.x, camera.position.y, camera.position.z );

				camera.addEventListener('goto', function( event ) {
					camera.lookAt(event.object);
					camera.updateProjectionMatrix();
				})

				return camera;
			}


			function resizeBackdrop(){
				var w = innerScreenWidth;
				var h = innerScreenHeight;

				var element = backdrop.element;
				console.log("element" );
				console.log(document.getElementById(element.id));
				element.parentNode.removeChild(element);
				console.log(document.getElementById(element.id));

				scene.remove(backdrop);

				var color = "hsl(0, 60%, 50%)";
				object = makeBackdrop(w, h, color);
				//object.element.style.width = w + "px";
				//object.element.style.height = h + "px";
				object.element.style.bordercolor = "3px solid red";
				object.width = w;
				object.height = h;
				scene.add(object);
			}

			function makeBackdrop(w, h, color) {
				var element = document.createElement( 'div' );
				element.id= backdropId;
				console.log(w + "," + h);
				element.style.width = w + "px";
				element.style.height = h + "px";
				element.style.border = "3px solid " + color;

				var object = new THREE.CSS3DObject( element );

				object.position.x = 0;
				object.position.y = 0;
				object.position.z = 6500;
				object.name = element.id;
				backdrop = object;
				return backdrop;
			}

			function cameraZoom(e){
				console.log('camera moving from:')
				console.log(camera.position)
				console.log('to:')
				console.log(e.destination);
				//camera.translateZ(e.destination.x*1000)

				console.log(this)

				new TWEEN.Tween( camera.position ).to( {
				    x: e.destination.x,
				    y: e.destination.y,
				    z: e.destination.z}, 1200 )
					//.onUpdate(render)
				  .easing( TWEEN.Easing.Cubic.Out).onComplete(function() {
						console.log('new camera position:')
						console.log(camera.position)}).start();
			}

			function onWindowResize() {
				camera = initCamera();
				//resizeBackdrop();
				renderer.setSize( window.innerWidth, window.innerHeight );
				camera.updateProjectionMatrix();
				render();
			}
			function animate() {
				requestAnimationFrame( animate );
				TWEEN.update();
				render();
				//controls.update();
			}
			function render() {
				renderer.render( scene, camera );
			}
		</script>
	</body>
</html>
